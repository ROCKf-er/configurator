from xml.dom import minidom
import os

XML_FILE_NAME = "./parameters.xml"
HEADER_FILE_NAME = "./include/constraints.h"

#if __name__ == "__main__":

xml_file = minidom.parse(XML_FILE_NAME)

header_file = open(HEADER_FILE_NAME, "w")
script_name = os.path.basename(__file__)
header_file.write(f'// This file is automatically generated from "{XML_FILE_NAME}" file by script "{script_name}".' + "\n")
header_file.write('' + "\n")
header_file.write('#ifndef CONSTRAINTS_H' + "\n")
header_file.write('#define CONSTRAINTS_H' + "\n")
header_file.write('' + "\n")
header_file.write('#include "main.h"' + "\n")
header_file.write('' + "\n")
header_file.write('param_constraint param_costraint_arr[PARAM_COUNT] = {' + "\n")

params = xml_file.getElementsByTagName("ArduPlane")
for parm in params:
    siblings = parm.childNodes
    for sib in siblings:
        print(f"sib = {sib}")
        if sib.nodeType == minidom.Node.TEXT_NODE:
            pass
        if sib.nodeType == minidom.Node.ELEMENT_NODE:
            param_name_str = str(sib.tagName)
            param_description_str = str(sib.getElementsByTagName("Description")[0].firstChild.wholeText)
            param_range_str = str(sib.getElementsByTagName("Range")[0].firstChild.data)
            range_list = param_range_str.split(" ")
            param_min_str = range_list[0]
            param_max_str = range_list[1]
            param_default_str = str(sib.getElementsByTagName("Default")[0].firstChild.data)
            param_step_str = str(sib.getElementsByTagName("Step")[0].firstChild.data)

            header_file.write('\t{' + "\n")
            header_file.write('\t\t' + param_min_str + ', // float min_value;' + "\n")
            header_file.write('\t\t' + param_max_str + ', // float max_value;' + "\n")
            header_file.write('\t\t' + param_step_str + ', // float step_value;' + "\n")
            header_file.write('\t\t' + param_default_str + ', // float default_value;' + "\n")
            header_file.write('\t\t"' + param_description_str + '", // char description[300];' + "\n")
            header_file.write('\t\tfalse, // bool actual;' + "\n")
            header_file.write('\t},' + "\n")

header_file.write('};' + "\n")
header_file.write('' + "\n")
header_file.write('#endif // CONSTRAINTS_H' + "\n")

header_file.close()